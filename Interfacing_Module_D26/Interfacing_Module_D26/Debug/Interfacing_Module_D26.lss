
Interfacing_Module_D26.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000057a  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b9b  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b0b  00000000  00000000  0000234f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c9d  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d4  00000000  00000000  00003af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000736  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001251  00000000  00000000  00004502  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00005753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	7e 01       	movw	r14, r28
  56:	81 01       	movw	r16, r2
  58:	84 01       	movw	r16, r8
  5a:	87 01       	movw	r16, r14
  5c:	8a 01       	movw	r16, r20
  5e:	8d 01       	movw	r16, r26
  60:	90 01       	movw	r18, r0
  62:	93 01       	movw	r18, r6

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ea e7       	ldi	r30, 0x7A	; 122
  78:	f5 e0       	ldi	r31, 0x05	; 5
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a2 e7       	ldi	r26, 0x72	; 114
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 37       	cpi	r26, 0x72	; 114
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
* Created: 2/19/2022 2:50:16 PM
* Author : 
*/
#include "main.h"
int main(void)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x6>
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x8>
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
char string[5];
int value;
ADC_Initialize();
  b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ADC_Initialize>

Motor_Initialize();
  b4:	0e 94 73 00 	call	0xe6	; 0xe6 <Motor_Initialize>
LCD_Initialize();
  b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Initialize>
LCD_Write_String("Your Direction is");
  bc:	80 e6       	ldi	r24, 0x60	; 96
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Write_String>


	/* Replace with your application code */
	while (1)
	{
	LCD_Write_Command(0xc4);
  c4:	84 ec       	ldi	r24, 0xC4	; 196
  c6:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
	value=ADC_Read(ADC0);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 75 01 	call	0x2ea	; 0x2ea <ADC_Read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  d0:	4a e0       	ldi	r20, 0x0A	; 10
  d2:	be 01       	movw	r22, r28
  d4:	6f 5f       	subi	r22, 0xFF	; 255
  d6:	7f 4f       	sbci	r23, 0xFF	; 255
  d8:	0e 94 86 02 	call	0x50c	; 0x50c <__itoa_ncheck>
	itoa(value,string,10);
	LCD_Write_String(string);
  dc:	ce 01       	movw	r24, r28
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Write_String>
  e4:	ef cf       	rjmp	.-34     	; 0xc4 <main+0x22>

000000e6 <Motor_Initialize>:
 *  Author: Omar
 */ 
#include "Motor_Private.h"

void Motor_Initialize(void){
	DIO_SetPinDirection(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE1, H_BRIDGE_STATE);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	64 e0       	ldi	r22, 0x04	; 4
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
	DIO_SetPinDirection(H_BRIDGE_ENABLE_PRT, H_BRIDGE_ENABLE2, H_BRIDGE_STATE);
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
	DIO_SetPinDirection(H_BRIDGE_A_PRT, H_BRIDGE_A1, H_BRIDGE_STATE);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
	DIO_SetPinDirection(H_BRIDGE_A_PRT, H_BRIDGE_A2, H_BRIDGE_STATE);
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	64 e0       	ldi	r22, 0x04	; 4
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
	DIO_SetPinDirection(H_BRIDGE_A_PRT, H_BRIDGE_A3, H_BRIDGE_STATE);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	65 e0       	ldi	r22, 0x05	; 5
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
	DIO_SetPinDirection(H_BRIDGE_A_PRT, H_BRIDGE_A4, H_BRIDGE_STATE);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	66 e0       	ldi	r22, 0x06	; 6
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 122:	08 95       	ret

00000124 <LCD_Write_Command>:
		{
			LCD_Write_Command(location_row1);
		}
		break;
		default:
		LCD_Write_Command(location_row0);
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	9c 2f       	mov	r25, r28
 14a:	90 7f       	andi	r25, 0xF0	; 240
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	8b bb       	out	0x1b, r24	; 27
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Write_Command+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Write_Command+0x42>
 166:	00 00       	nop
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	63 e0       	ldi	r22, 0x03	; 3
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 172:	2b b3       	in	r18, 0x1b	; 27
 174:	30 e1       	ldi	r19, 0x10	; 16
 176:	c3 9f       	mul	r28, r19
 178:	c0 01       	movw	r24, r0
 17a:	11 24       	eor	r1, r1
 17c:	92 2f       	mov	r25, r18
 17e:	9f 70       	andi	r25, 0x0F	; 15
 180:	89 2b       	or	r24, r25
 182:	8b bb       	out	0x1b, r24	; 27
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	63 e0       	ldi	r22, 0x03	; 3
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 18e:	8f e9       	ldi	r24, 0x9F	; 159
 190:	9f e0       	ldi	r25, 0x0F	; 15
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Write_Command+0x6e>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Write_Command+0x74>
 198:	00 00       	nop
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	63 e0       	ldi	r22, 0x03	; 3
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	9e e4       	ldi	r25, 0x4E	; 78
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Write_Command+0x84>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Write_Command+0x8a>
 1ae:	00 00       	nop
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <LCD_Initialize>:
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	65 e0       	ldi	r22, 0x05	; 5
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	66 e0       	ldi	r22, 0x06	; 6
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDirection>
 1fa:	83 e3       	ldi	r24, 0x33	; 51
 1fc:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 206:	88 e2       	ldi	r24, 0x28	; 40
 208:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_Command>
 224:	08 95       	ret

00000226 <LCD_Write_Character>:
	#else
	#warning "LCD Mode is incorrect"
	#endif
}
void LCD_Write_Character(uint8_t character)//Write a data on LCD
{
 226:	cf 93       	push	r28
 228:	c8 2f       	mov	r28, r24
	//Select Data register
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_RS, LCD_HIGH);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
	//Select write on LCD
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_RW, LCD_LOW);
 234:	40 e0       	ldi	r20, 0x00	; 0
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
	//Disable LCD before writing commands
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
	#if LCD_MODE == LCD_4BIT_MODE
	//Start sending commands by sending high Nibble
	LCD = (character & 0xF0) | (LCD & 0x0F);
 248:	8b b3       	in	r24, 0x1b	; 27
 24a:	9c 2f       	mov	r25, r28
 24c:	90 7f       	andi	r25, 0xF0	; 240
 24e:	8f 70       	andi	r24, 0x0F	; 15
 250:	89 2b       	or	r24, r25
 252:	8b bb       	out	0x1b, r24	; 27
	//Send high to low pulse
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	63 e0       	ldi	r22, 0x03	; 3
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	8f e9       	ldi	r24, 0x9F	; 159
 260:	9f e0       	ldi	r25, 0x0F	; 15
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_Write_Character+0x3c>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_Write_Character+0x42>
 268:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
	//Start sending commands by sending low Nibble
	LCD = ((character<<4) & 0xF0) | (LCD & 0x0F);
 274:	2b b3       	in	r18, 0x1b	; 27
 276:	30 e1       	ldi	r19, 0x10	; 16
 278:	c3 9f       	mul	r28, r19
 27a:	c0 01       	movw	r24, r0
 27c:	11 24       	eor	r1, r1
 27e:	92 2f       	mov	r25, r18
 280:	9f 70       	andi	r25, 0x0F	; 15
 282:	89 2b       	or	r24, r25
 284:	8b bb       	out	0x1b, r24	; 27
	//Send high to low pulse
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 290:	8f e9       	ldi	r24, 0x9F	; 159
 292:	9f e0       	ldi	r25, 0x0F	; 15
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_Write_Character+0x6e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_Write_Character+0x74>
 29a:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_SetPinValue>
 2a6:	8f e1       	ldi	r24, 0x1F	; 31
 2a8:	9e e4       	ldi	r25, 0x4E	; 78
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_Write_Character+0x84>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_Write_Character+0x8a>
 2b0:	00 00       	nop
	DIO_SetPinValue(LCD_CTRL_PRT, LCD_EN, LCD_LOW);
	_delay_ms(5);
	#else
	#warning "LCD Mode is incorrect"
	#endif
}
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCD_Write_String>:
void LCD_Write_String(uint8_t* str)//Write a string on LCD
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
	while (*str != '\0')
 2bc:	88 81       	ld	r24, Y
 2be:	88 23       	and	r24, r24
 2c0:	61 f0       	breq	.+24     	; 0x2da <LCD_Write_String+0x24>
 2c2:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_Character(*str);
 2c4:	0e 94 13 01 	call	0x226	; 0x226 <LCD_Write_Character>
 2c8:	8f e3       	ldi	r24, 0x3F	; 63
 2ca:	9c e9       	ldi	r25, 0x9C	; 156
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Write_String+0x16>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_Write_String+0x1c>
 2d2:	00 00       	nop
	#warning "LCD Mode is incorrect"
	#endif
}
void LCD_Write_String(uint8_t* str)//Write a string on LCD
{
	while (*str != '\0')
 2d4:	89 91       	ld	r24, Y+
 2d6:	81 11       	cpse	r24, r1
 2d8:	f5 cf       	rjmp	.-22     	; 0x2c4 <LCD_Write_String+0xe>
	{
		LCD_Write_Character(*str);
		_delay_ms(10);
		str++;
	}
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <ADC_Initialize>:
#include "ADC_Private.h"


void ADC_Initialize(void)
{
	ADMUX = 0x40;
 2e0:	80 e4       	ldi	r24, 0x40	; 64
 2e2:	87 b9       	out	0x07, r24	; 7
	1- Enable ADC
	2- Select Pre-scaler
	3- Auto trigger
	4- Disable peripheral interrupt
	*/
	ADCSRA = 0xA7;
 2e4:	87 ea       	ldi	r24, 0xA7	; 167
 2e6:	86 b9       	out	0x06, r24	; 6
 2e8:	08 95       	ret

000002ea <ADC_Read>:
}
uint16_t ADC_Read(ADC_Chanel adc)
{
	uint16_t ADCReading = 0;
	//Choose channel
	switch (adc)
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	88 30       	cpi	r24, 0x08	; 8
 2ee:	91 05       	cpc	r25, r1
 2f0:	e8 f4       	brcc	.+58     	; 0x32c <ADC_Read+0x42>
 2f2:	fc 01       	movw	r30, r24
 2f4:	e6 5d       	subi	r30, 0xD6	; 214
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	0c 94 80 02 	jmp	0x500	; 0x500 <__tablejump2__>
	{
		case ADC0:
		ADMUX = 0x40;
 2fc:	80 e4       	ldi	r24, 0x40	; 64
 2fe:	87 b9       	out	0x07, r24	; 7
		break;
 300:	17 c0       	rjmp	.+46     	; 0x330 <ADC_Read+0x46>
		case ADC1:
		ADMUX = 0x41;
 302:	81 e4       	ldi	r24, 0x41	; 65
 304:	87 b9       	out	0x07, r24	; 7
		break;
 306:	14 c0       	rjmp	.+40     	; 0x330 <ADC_Read+0x46>
		case ADC2:
		ADMUX = 0x42;
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	87 b9       	out	0x07, r24	; 7
		break;
 30c:	11 c0       	rjmp	.+34     	; 0x330 <ADC_Read+0x46>
		case ADC3:
		ADMUX = 0x43;
 30e:	83 e4       	ldi	r24, 0x43	; 67
 310:	87 b9       	out	0x07, r24	; 7
		break;
 312:	0e c0       	rjmp	.+28     	; 0x330 <ADC_Read+0x46>
		case ADC4:
		ADMUX = 0x44;
 314:	84 e4       	ldi	r24, 0x44	; 68
 316:	87 b9       	out	0x07, r24	; 7
		break;
 318:	0b c0       	rjmp	.+22     	; 0x330 <ADC_Read+0x46>
		case ADC5:
		ADMUX = 0x45;
 31a:	85 e4       	ldi	r24, 0x45	; 69
 31c:	87 b9       	out	0x07, r24	; 7
		break;
 31e:	08 c0       	rjmp	.+16     	; 0x330 <ADC_Read+0x46>
		case ADC6:
		ADMUX = 0x46;
 320:	86 e4       	ldi	r24, 0x46	; 70
 322:	87 b9       	out	0x07, r24	; 7
		break;
 324:	05 c0       	rjmp	.+10     	; 0x330 <ADC_Read+0x46>
		case ADC7:
		ADMUX = 0x47;
 326:	87 e4       	ldi	r24, 0x47	; 71
 328:	87 b9       	out	0x07, r24	; 7
		break;
 32a:	02 c0       	rjmp	.+4      	; 0x330 <ADC_Read+0x46>
		default:
		ADMUX = 0x40;
 32c:	80 e4       	ldi	r24, 0x40	; 64
 32e:	87 b9       	out	0x07, r24	; 7
		break;
	}
	//Enable for conversion(SOC)
	SET_BIT(ADCSRA, ADSC);
 330:	36 9a       	sbi	0x06, 6	; 6
	//Polling until conversion finished(EOC)
	while (GET_BIT(ADCSRA, ADIF) != 1);
 332:	34 9b       	sbis	0x06, 4	; 6
 334:	fe cf       	rjmp	.-4      	; 0x332 <ADC_Read+0x48>
	//Return Data from ADC
	ADCReading = ADC_VAL;
 336:	84 b1       	in	r24, 0x04	; 4
 338:	95 b1       	in	r25, 0x05	; 5
	return ADCReading;
 33a:	08 95       	ret

0000033c <DIO_SetPinDirection>:


//To define direction (Input/Output)
void DIO_SetPinDirection(port Port, pin Pin, direction Direction)
{
	switch(Direction)
 33c:	44 23       	and	r20, r20
 33e:	19 f0       	breq	.+6      	; 0x346 <DIO_SetPinDirection+0xa>
 340:	41 30       	cpi	r20, 0x01	; 1
 342:	c9 f1       	breq	.+114    	; 0x3b6 <DIO_SetPinDirection+0x7a>
 344:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 f0       	breq	.+36     	; 0x36e <DIO_SetPinDirection+0x32>
 34a:	28 f0       	brcs	.+10     	; 0x356 <DIO_SetPinDirection+0x1a>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	d9 f0       	breq	.+54     	; 0x386 <DIO_SetPinDirection+0x4a>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	29 f1       	breq	.+74     	; 0x39e <DIO_SetPinDirection+0x62>
 354:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 356:	2a b3       	in	r18, 0x1a	; 26
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_SetPinDirection+0x26>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_SetPinDirection+0x22>
 366:	80 95       	com	r24
 368:	82 23       	and	r24, r18
 36a:	8a bb       	out	0x1a, r24	; 26
			break;
 36c:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB , Pin);
 36e:	27 b3       	in	r18, 0x17	; 23
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_SetPinDirection+0x3e>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_SetPinDirection+0x3a>
 37e:	80 95       	com	r24
 380:	82 23       	and	r24, r18
 382:	87 bb       	out	0x17, r24	; 23
			break;
 384:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 386:	24 b3       	in	r18, 0x14	; 20
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_SetPinDirection+0x56>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_SetPinDirection+0x52>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	84 bb       	out	0x14, r24	; 20
			break;
 39c:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 39e:	21 b3       	in	r18, 0x11	; 17
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_SetPinDirection+0x6e>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_SetPinDirection+0x6a>
 3ae:	80 95       	com	r24
 3b0:	82 23       	and	r24, r18
 3b2:	81 bb       	out	0x11, r24	; 17
			break;
 3b4:	08 95       	ret
			//#warning "Port or Pin Not Correcrt"
			break;
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	89 f0       	breq	.+34     	; 0x3dc <DIO_SetPinDirection+0xa0>
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <DIO_SetPinDirection+0x8a>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	c9 f0       	breq	.+50     	; 0x3f2 <DIO_SetPinDirection+0xb6>
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	11 f1       	breq	.+68     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3c4:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 3c6:	2a b3       	in	r18, 0x1a	; 26
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_SetPinDirection+0x96>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_SetPinDirection+0x92>
 3d6:	82 2b       	or	r24, r18
 3d8:	8a bb       	out	0x1a, r24	; 26
			break;
 3da:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB , Pin);
 3dc:	27 b3       	in	r18, 0x17	; 23
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_SetPinDirection+0xac>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_SetPinDirection+0xa8>
 3ec:	82 2b       	or	r24, r18
 3ee:	87 bb       	out	0x17, r24	; 23
			break;
 3f0:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 3f2:	24 b3       	in	r18, 0x14	; 20
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_SetPinDirection+0xc2>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_SetPinDirection+0xbe>
 402:	82 2b       	or	r24, r18
 404:	84 bb       	out	0x14, r24	; 20
			break;
 406:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 408:	21 b3       	in	r18, 0x11	; 17
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	82 2b       	or	r24, r18
 41a:	81 bb       	out	0x11, r24	; 17
 41c:	08 95       	ret

0000041e <DIO_SetPinValue>:
	}
}
//To define state (High/Low)
void DIO_SetPinValue(port Port, pin Pin, state State)
{
	switch(State)
 41e:	44 23       	and	r20, r20
 420:	19 f0       	breq	.+6      	; 0x428 <DIO_SetPinValue+0xa>
 422:	41 30       	cpi	r20, 0x01	; 1
 424:	c9 f1       	breq	.+114    	; 0x498 <DIO_SetPinValue+0x7a>
 426:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	91 f0       	breq	.+36     	; 0x450 <DIO_SetPinValue+0x32>
 42c:	28 f0       	brcs	.+10     	; 0x438 <DIO_SetPinValue+0x1a>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	d9 f0       	breq	.+54     	; 0x468 <DIO_SetPinValue+0x4a>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	29 f1       	breq	.+74     	; 0x480 <DIO_SetPinValue+0x62>
 436:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 438:	2b b3       	in	r18, 0x1b	; 27
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_SetPinValue+0x26>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_SetPinValue+0x22>
 448:	80 95       	com	r24
 44a:	82 23       	and	r24, r18
 44c:	8b bb       	out	0x1b, r24	; 27
			break;
 44e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB , Pin);
 450:	28 b3       	in	r18, 0x18	; 24
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_SetPinValue+0x3e>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_SetPinValue+0x3a>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	88 bb       	out	0x18, r24	; 24
			break;
 466:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 468:	25 b3       	in	r18, 0x15	; 21
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_SetPinValue+0x56>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_SetPinValue+0x52>
 478:	80 95       	com	r24
 47a:	82 23       	and	r24, r18
 47c:	85 bb       	out	0x15, r24	; 21
			break;
 47e:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 480:	22 b3       	in	r18, 0x12	; 18
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_SetPinValue+0x6e>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_SetPinValue+0x6a>
 490:	80 95       	com	r24
 492:	82 23       	and	r24, r18
 494:	82 bb       	out	0x12, r24	; 18
			break;
 496:	08 95       	ret
			//#warning "Port or Pin Not Correcrt"
			break;
		}
		break;
		case DIO_HIGH:
		switch (Port)
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	89 f0       	breq	.+34     	; 0x4be <DIO_SetPinValue+0xa0>
 49c:	28 f0       	brcs	.+10     	; 0x4a8 <DIO_SetPinValue+0x8a>
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	c9 f0       	breq	.+50     	; 0x4d4 <DIO_SetPinValue+0xb6>
 4a2:	83 30       	cpi	r24, 0x03	; 3
 4a4:	11 f1       	breq	.+68     	; 0x4ea <DIO_SetPinValue+0xcc>
 4a6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 4a8:	2b b3       	in	r18, 0x1b	; 27
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_SetPinValue+0x96>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_SetPinValue+0x92>
 4b8:	82 2b       	or	r24, r18
 4ba:	8b bb       	out	0x1b, r24	; 27
			break;
 4bc:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB , Pin);
 4be:	28 b3       	in	r18, 0x18	; 24
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_SetPinValue+0xac>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_SetPinValue+0xa8>
 4ce:	82 2b       	or	r24, r18
 4d0:	88 bb       	out	0x18, r24	; 24
			break;
 4d2:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 4d4:	25 b3       	in	r18, 0x15	; 21
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_SetPinValue+0xc2>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_SetPinValue+0xbe>
 4e4:	82 2b       	or	r24, r18
 4e6:	85 bb       	out	0x15, r24	; 21
			break;
 4e8:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 4ea:	22 b3       	in	r18, 0x12	; 18
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_SetPinValue+0xd8>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_SetPinValue+0xd4>
 4fa:	82 2b       	or	r24, r18
 4fc:	82 bb       	out	0x12, r24	; 18
 4fe:	08 95       	ret

00000500 <__tablejump2__>:
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	05 90       	lpm	r0, Z+
 506:	f4 91       	lpm	r31, Z
 508:	e0 2d       	mov	r30, r0
 50a:	09 94       	ijmp

0000050c <__itoa_ncheck>:
 50c:	bb 27       	eor	r27, r27
 50e:	4a 30       	cpi	r20, 0x0A	; 10
 510:	31 f4       	brne	.+12     	; 0x51e <__itoa_ncheck+0x12>
 512:	99 23       	and	r25, r25
 514:	22 f4       	brpl	.+8      	; 0x51e <__itoa_ncheck+0x12>
 516:	bd e2       	ldi	r27, 0x2D	; 45
 518:	90 95       	com	r25
 51a:	81 95       	neg	r24
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	0c 94 92 02 	jmp	0x524	; 0x524 <__utoa_common>

00000522 <__utoa_ncheck>:
 522:	bb 27       	eor	r27, r27

00000524 <__utoa_common>:
 524:	fb 01       	movw	r30, r22
 526:	55 27       	eor	r21, r21
 528:	aa 27       	eor	r26, r26
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	aa 1f       	adc	r26, r26
 530:	a4 17       	cp	r26, r20
 532:	10 f0       	brcs	.+4      	; 0x538 <__utoa_common+0x14>
 534:	a4 1b       	sub	r26, r20
 536:	83 95       	inc	r24
 538:	50 51       	subi	r21, 0x10	; 16
 53a:	b9 f7       	brne	.-18     	; 0x52a <__utoa_common+0x6>
 53c:	a0 5d       	subi	r26, 0xD0	; 208
 53e:	aa 33       	cpi	r26, 0x3A	; 58
 540:	08 f0       	brcs	.+2      	; 0x544 <__utoa_common+0x20>
 542:	a9 5d       	subi	r26, 0xD9	; 217
 544:	a1 93       	st	Z+, r26
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	79 f7       	brne	.-34     	; 0x528 <__utoa_common+0x4>
 54a:	b1 11       	cpse	r27, r1
 54c:	b1 93       	st	Z+, r27
 54e:	11 92       	st	Z+, r1
 550:	cb 01       	movw	r24, r22
 552:	0c 94 ab 02 	jmp	0x556	; 0x556 <strrev>

00000556 <strrev>:
 556:	dc 01       	movw	r26, r24
 558:	fc 01       	movw	r30, r24
 55a:	67 2f       	mov	r22, r23
 55c:	71 91       	ld	r23, Z+
 55e:	77 23       	and	r23, r23
 560:	e1 f7       	brne	.-8      	; 0x55a <strrev+0x4>
 562:	32 97       	sbiw	r30, 0x02	; 2
 564:	04 c0       	rjmp	.+8      	; 0x56e <strrev+0x18>
 566:	7c 91       	ld	r23, X
 568:	6d 93       	st	X+, r22
 56a:	70 83       	st	Z, r23
 56c:	62 91       	ld	r22, -Z
 56e:	ae 17       	cp	r26, r30
 570:	bf 07       	cpc	r27, r31
 572:	c8 f3       	brcs	.-14     	; 0x566 <strrev+0x10>
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
